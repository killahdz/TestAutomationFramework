// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Smoke.Features.Portal
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Smoke.Features.Portal.Pages")]
    public partial class Smoke_Features_Portal_PagesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Pages.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Smoke.Features.Portal.Pages", "\tIn order to know that a particular page is available\r\n\tAs a ServiceNow Developer" +
                    "\r\n\tI expect the page to load successfully", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PortalPage")]
        [NUnit.Framework.CategoryAttribute("dev")]
        [NUnit.Framework.CategoryAttribute("patch")]
        [NUnit.Framework.CategoryAttribute("uat")]
        [NUnit.Framework.CategoryAttribute("prod")]
        [NUnit.Framework.CategoryAttribute("video")]
        [NUnit.Framework.TestCaseAttribute("*HomePage*", "rttms", ".portal-contentHeader", "page heading", null)]
        [NUnit.Framework.TestCaseAttribute("*TrackSearch*", "rttms/#/track/search", ".mdl-list", "result list <ul>", null)]
        [NUnit.Framework.TestCaseAttribute("*OrderSearch*", "rttms/#/order/search", ".mdl-list", "result list <ul>", null)]
        [NUnit.Framework.TestCaseAttribute("*HelpSearch*", "rttms/#/help/search", ".mdl-list", "result list <ul>", null)]
        [NUnit.Framework.TestCaseAttribute("*Search*", "rttms/#/search/all", "#term", "search text box", null)]
        [NUnit.Framework.TestCaseAttribute("*News*", "rttms/#/news", ".rtp_content-main", "content container", null)]
        [NUnit.Framework.TestCaseAttribute("*ProfileEdit*", "rttms/#/profile/edit", ".rtp_formField", "form field", null)]
        [NUnit.Framework.TestCaseAttribute("*ProfileSystemSettings*", "rttms/#/profile/system", ".rtp_card__content__section", "content section", null)]
        [NUnit.Framework.TestCaseAttribute("*ProfileTimeZone*", "rttms/#/profile/timezone", ".rtp_card__content__section", "content section", null)]
        [NUnit.Framework.TestCaseAttribute("*ProfileServiceLevels*", "rttms/#/profile/servicelevels", ".mdl-grid", "content grid", null)]
        public virtual void PortalPage(string name, string url, string selector, string selectorDescription, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "dev",
                    "patch",
                    "uat",
                    "prod",
                    "video"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PortalPage", @__tags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given(string.Format("I go to this url \'{0}\' and wait until I see the element with the selector \'{1}\'", url, selector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.Then("I should observe no script errors on the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
